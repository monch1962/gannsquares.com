# Node.js
# Build a general Node.js project with npm.
# Add steps that analyze code, save build artifacts, deploy, and more:
# https://docs.microsoft.com/azure/devops/pipelines/languages/javascript

pool:
  vmImage: "Ubuntu 16.04"

steps:
  - task: NodeTool@0
    inputs:
      versionSpec: "8.x"
    displayName: "Install Node.js"

  - script: |
      # Install all the Node pieces to execute the test suite
      cd tests
      npm install
    displayName: "npm install and build"

  - script: |
      npm run browser-tests
    displayName: "Run browser automation tests"

  - script: |
      # First gather lines-of-coverage data from the test cases
      # node_modules/nyc/bin/nyc.js --reporter=lcov --reporter=text-lcov npm test

      # Download sonar-scanner
      SONARCLOUDDIR=/tmp
      wget https://binaries.sonarsource.com/Distribution/sonar-scanner-cli/sonar-scanner-cli-3.2.0.1227-linux.zip -O $SONARCLOUDDIR/sonar.zip
      unzip $SONARCLOUDDIR/sonar.zip -d /tmp

      # Print out some diagnostic info
      ls -al $SONARCLOUDDIR
      cat $SONARCLOUDDIR/sonar-scanner-3.2.0.1227-linux/conf/sonar-scanner.properties
      PATH=$SONARCLOUDDIR/sonar-scanner-3.2.0.1227-linux/bin:$PATH
      echo $PATH
      APP_DIR=$(pwd)
      ls -al
      sonar-scanner -h

      # Run sonar-scanner
      sonar-scanner \
      -Dsonar.projectKey=monch1962_gannsquares.com \
      -Dsonar.organization=monch1962-github \
      -Dsonar.sources=. \
      -Dsonar.exclusions=tests/**,coverage/** \
      -Dsonar.host.url=https://sonarcloud.io \
      -Dsonar.javascript.lcov.reportPaths=app/coverage/** \
      -Dsonar.login=8725538bd2603c6990da57d9c53afe2d176fb844
    displayName: "Run sonarcloud code quality tests"

    # Publish Test Results
  # Publish Test Results to Azure Pipelines/TFS
  - task: PublishTestResults@2
    inputs:
      testResultsFormat: "JUnit" # Options: JUnit, NUnit, VSTest, xUnit
      testResultsFiles: "**/TEST-*.xml"
      #searchFolder: '$(System.DefaultWorkingDirectory)' # Optional
      #mergeTestResults: false # Optional
      #testRunTitle: 'Integration' # Optional
      #buildPlatform: # Optional
      #buildConfiguration: # Optional
      #publishRunAttachments: true # Optional

  # Copy Files
  # Copy files from source folder to target folder using match patterns (The match patterns will only match file paths, not folder paths)
  - task: CopyFiles@2
    inputs:
      sourceFolder: $(Build.SourcesDirectory)
      contents: |
        2*/**/*.png
        !2*/**/thumbnails/*.png
      targetFolder: $(Build.ArtifactStagingDirectory)
      #cleanTargetFolder: false # Optional
      #overWrite: false # Optional
      #flattenFolders: false # Optional

  - task: PublishBuildArtifacts@1
    inputs:
      pathtoPublish: "$(Build.ArtifactStagingDirectory)"
      artifactName: UI-test-screenshots
